// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __REGISTRY_H_
#define __REGISTRY_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace Tseer
{
    struct NodeInstanceInfo : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "Tseer.NodeInstanceInfo";
        }
        static string MD5()
        {
            return "26a898b86ec52b208c13f81a9242fcd3";
        }
        NodeInstanceInfo()
        :nodeName(""),nodeObj(""),endpointIp(""),endpointPort(0),version(""),osversion(""),locator("")
        {
        }
        void resetDefautlt()
        {
            nodeName = "";
            nodeObj = "";
            endpointIp = "";
            endpointPort = 0;
            version = "";
            osversion = "";
            locator = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(nodeName, 0);
            if (nodeObj != "")
            {
                _os.write(nodeObj, 1);
            }
            if (endpointIp != "")
            {
                _os.write(endpointIp, 2);
            }
            if (endpointPort != 0)
            {
                _os.write(endpointPort, 3);
            }
            if (version != "")
            {
                _os.write(version, 4);
            }
            if (osversion != "")
            {
                _os.write(osversion, 5);
            }
            if (locator != "")
            {
                _os.write(locator, 6);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(nodeName, 0, true);
            _is.read(nodeObj, 1, false);
            _is.read(endpointIp, 2, false);
            _is.read(endpointPort, 3, false);
            _is.read(version, 4, false);
            _is.read(osversion, 5, false);
            _is.read(locator, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(nodeName,"nodeName");
            _ds.display(nodeObj,"nodeObj");
            _ds.display(endpointIp,"endpointIp");
            _ds.display(endpointPort,"endpointPort");
            _ds.display(version,"version");
            _ds.display(osversion,"osversion");
            _ds.display(locator,"locator");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(nodeName, true);
            _ds.displaySimple(nodeObj, true);
            _ds.displaySimple(endpointIp, true);
            _ds.displaySimple(endpointPort, true);
            _ds.displaySimple(version, true);
            _ds.displaySimple(osversion, true);
            _ds.displaySimple(locator, false);
            return _os;
        }
    public:
        std::string nodeName;
        std::string nodeObj;
        std::string endpointIp;
        tars::Int32 endpointPort;
        std::string version;
        std::string osversion;
        std::string locator;
    };
    inline bool operator==(const NodeInstanceInfo&l, const NodeInstanceInfo&r)
    {
        return l.nodeName == r.nodeName && l.nodeObj == r.nodeObj && l.endpointIp == r.endpointIp && l.endpointPort == r.endpointPort && l.version == r.version && l.osversion == r.osversion && l.locator == r.locator;
    }
    inline bool operator!=(const NodeInstanceInfo&l, const NodeInstanceInfo&r)
    {
        return !(l == r);
    }

    struct PackageInfo : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "Tseer.PackageInfo";
        }
        static string MD5()
        {
            return "ed5d2e90963962a81d61516eb944ffd0";
        }
        PackageInfo()
        :version(""),md5(""),packageName(""),ostype(""),netID(""),ip(""),gray(false)
        {
        }
        void resetDefautlt()
        {
            version = "";
            md5 = "";
            packageName = "";
            ostype = "";
            netID = "";
            ip = "";
            gray = false;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(version, 0);
            _os.write(md5, 1);
            _os.write(packageName, 2);
            _os.write(ostype, 3);
            _os.write(netID, 4);
            _os.write(ip, 5);
            _os.write(gray, 6);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(version, 0, true);
            _is.read(md5, 1, true);
            _is.read(packageName, 2, true);
            _is.read(ostype, 3, true);
            _is.read(netID, 4, true);
            _is.read(ip, 5, true);
            _is.read(gray, 6, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(version,"version");
            _ds.display(md5,"md5");
            _ds.display(packageName,"packageName");
            _ds.display(ostype,"ostype");
            _ds.display(netID,"netID");
            _ds.display(ip,"ip");
            _ds.display(gray,"gray");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(version, true);
            _ds.displaySimple(md5, true);
            _ds.displaySimple(packageName, true);
            _ds.displaySimple(ostype, true);
            _ds.displaySimple(netID, true);
            _ds.displaySimple(ip, true);
            _ds.displaySimple(gray, false);
            return _os;
        }
    public:
        std::string version;
        std::string md5;
        std::string packageName;
        std::string ostype;
        std::string netID;
        std::string ip;
        tars::Bool gray;
    };
    inline bool operator==(const PackageInfo&l, const PackageInfo&r)
    {
        return l.version == r.version && l.md5 == r.md5 && l.packageName == r.packageName && l.ostype == r.ostype && l.netID == r.netID && l.ip == r.ip && l.gray == r.gray;
    }
    inline bool operator!=(const PackageInfo&l, const PackageInfo&r)
    {
        return !(l == r);
    }

    struct UpdateReq : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "Tseer.UpdateReq";
        }
        static string MD5()
        {
            return "56132fe38cae2af2a74766eba129f9a3";
        }
        UpdateReq()
        :version(""),offset(0),packageName(""),ostype(""),gray(true),netID(""),ip("")
        {
        }
        void resetDefautlt()
        {
            version = "";
            offset = 0;
            packageName = "";
            ostype = "";
            gray = true;
            netID = "";
            ip = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(version, 0);
            _os.write(offset, 1);
            _os.write(packageName, 2);
            _os.write(ostype, 3);
            _os.write(gray, 4);
            if (netID != "")
            {
                _os.write(netID, 5);
            }
            if (ip != "")
            {
                _os.write(ip, 6);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(version, 0, true);
            _is.read(offset, 1, true);
            _is.read(packageName, 2, true);
            _is.read(ostype, 3, true);
            _is.read(gray, 4, true);
            _is.read(netID, 5, false);
            _is.read(ip, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(version,"version");
            _ds.display(offset,"offset");
            _ds.display(packageName,"packageName");
            _ds.display(ostype,"ostype");
            _ds.display(gray,"gray");
            _ds.display(netID,"netID");
            _ds.display(ip,"ip");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(version, true);
            _ds.displaySimple(offset, true);
            _ds.displaySimple(packageName, true);
            _ds.displaySimple(ostype, true);
            _ds.displaySimple(gray, true);
            _ds.displaySimple(netID, true);
            _ds.displaySimple(ip, false);
            return _os;
        }
    public:
        std::string version;
        tars::Int32 offset;
        std::string packageName;
        std::string ostype;
        tars::Bool gray;
        std::string netID;
        std::string ip;
    };
    inline bool operator==(const UpdateReq&l, const UpdateReq&r)
    {
        return l.version == r.version && l.offset == r.offset && l.packageName == r.packageName && l.ostype == r.ostype && l.gray == r.gray && l.netID == r.netID && l.ip == r.ip;
    }
    inline bool operator!=(const UpdateReq&l, const UpdateReq&r)
    {
        return !(l == r);
    }

    struct UpdateRsp : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "Tseer.UpdateRsp";
        }
        static string MD5()
        {
            return "f8662c07406f9fe88af4a08ae090975c";
        }
        UpdateRsp()
        :finish(true),offset(0),buff(""),packageName(""),needChange(false)
        {
        }
        void resetDefautlt()
        {
            finish = true;
            offset = 0;
            buff = "";
            packageName = "";
            needChange = false;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(finish, 0);
            _os.write(offset, 1);
            _os.write(buff, 2);
            _os.write(packageName, 3);
            if (needChange != false)
            {
                _os.write(needChange, 4);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(finish, 0, true);
            _is.read(offset, 1, true);
            _is.read(buff, 2, true);
            _is.read(packageName, 3, true);
            _is.read(needChange, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(finish,"finish");
            _ds.display(offset,"offset");
            _ds.display(buff,"buff");
            _ds.display(packageName,"packageName");
            _ds.display(needChange,"needChange");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(finish, true);
            _ds.displaySimple(offset, true);
            _ds.displaySimple(buff, true);
            _ds.displaySimple(packageName, true);
            _ds.displaySimple(needChange, false);
            return _os;
        }
    public:
        tars::Bool finish;
        tars::Int32 offset;
        std::string buff;
        std::string packageName;
        tars::Bool needChange;
    };
    inline bool operator==(const UpdateRsp&l, const UpdateRsp&r)
    {
        return l.finish == r.finish && l.offset == r.offset && l.buff == r.buff && l.packageName == r.packageName && l.needChange == r.needChange;
    }
    inline bool operator!=(const UpdateRsp&l, const UpdateRsp&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class RegistryPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~RegistryPrxCallback(){}
        virtual void callback_checkChange(tars::Int32 ret,  const Tseer::PackageInfo& rspinfo)
        { throw std::runtime_error("callback_checkChange() override incorrect."); }
        virtual void callback_checkChange_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_checkChange_exception() override incorrect."); }

        virtual void callback_keepAliveExt(tars::Int32 ret)
        { throw std::runtime_error("callback_keepAliveExt() override incorrect."); }
        virtual void callback_keepAliveExt_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_keepAliveExt_exception() override incorrect."); }

        virtual void callback_registerNodeExt(tars::Int32 ret)
        { throw std::runtime_error("callback_registerNodeExt() override incorrect."); }
        virtual void callback_registerNodeExt_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_registerNodeExt_exception() override incorrect."); }

        virtual void callback_updatePacket(tars::Int32 ret,  const Tseer::UpdateRsp& rsp)
        { throw std::runtime_error("callback_updatePacket() override incorrect."); }
        virtual void callback_updatePacket_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_updatePacket_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Registry_all[]=
            {
                "checkChange",
                "keepAliveExt",
                "registerNodeExt",
                "updatePacket"
            };
            pair<string*, string*> r = equal_range(__Registry_all, __Registry_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Registry_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_checkChange_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    Tseer::PackageInfo rspinfo;
                    _is.read(rspinfo, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_checkChange(_ret, rspinfo);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAliveExt_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_keepAliveExt(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerNodeExt_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_registerNodeExt(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updatePacket_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    Tseer::UpdateRsp rsp;
                    _is.read(rsp, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_updatePacket(_ret, rsp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<RegistryPrxCallback> RegistryPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class RegistryPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~RegistryPrxCallbackPromise(){}
    public:
        struct PromisecheckChange: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            Tseer::PackageInfo rspinfo;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisecheckChange > PromisecheckChangePtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromisecheckChangePtr > &promise)
        : _promise_checkChange(promise)
        {}
        
        virtual void callback_checkChange(const RegistryPrxCallbackPromise::PromisecheckChangePtr &ptr)
        {
            _promise_checkChange.setValue(ptr);
        }
        virtual void callback_checkChange_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:checkChange_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_checkChange.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromisecheckChangePtr > _promise_checkChange;

    public:
        struct PromisekeepAliveExt: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisekeepAliveExt > PromisekeepAliveExtPtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromisekeepAliveExtPtr > &promise)
        : _promise_keepAliveExt(promise)
        {}
        
        virtual void callback_keepAliveExt(const RegistryPrxCallbackPromise::PromisekeepAliveExtPtr &ptr)
        {
            _promise_keepAliveExt.setValue(ptr);
        }
        virtual void callback_keepAliveExt_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:keepAliveExt_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_keepAliveExt.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromisekeepAliveExtPtr > _promise_keepAliveExt;

    public:
        struct PromiseregisterNodeExt: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromiseregisterNodeExt > PromiseregisterNodeExtPtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromiseregisterNodeExtPtr > &promise)
        : _promise_registerNodeExt(promise)
        {}
        
        virtual void callback_registerNodeExt(const RegistryPrxCallbackPromise::PromiseregisterNodeExtPtr &ptr)
        {
            _promise_registerNodeExt.setValue(ptr);
        }
        virtual void callback_registerNodeExt_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:registerNodeExt_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_registerNodeExt.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromiseregisterNodeExtPtr > _promise_registerNodeExt;

    public:
        struct PromiseupdatePacket: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            Tseer::UpdateRsp rsp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromiseupdatePacket > PromiseupdatePacketPtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromiseupdatePacketPtr > &promise)
        : _promise_updatePacket(promise)
        {}
        
        virtual void callback_updatePacket(const RegistryPrxCallbackPromise::PromiseupdatePacketPtr &ptr)
        {
            _promise_updatePacket.setValue(ptr);
        }
        virtual void callback_updatePacket_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:updatePacket_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_updatePacket.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromiseupdatePacketPtr > _promise_updatePacket;

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Registry_all[]=
            {
                "checkChange",
                "keepAliveExt",
                "registerNodeExt",
                "updatePacket"
            };

            pair<string*, string*> r = equal_range(__Registry_all, __Registry_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Registry_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_checkChange_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromisecheckChangePtr ptr = new RegistryPrxCallbackPromise::PromisecheckChange();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->rspinfo, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_checkChange_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_checkChange_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_checkChange(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAliveExt_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromisekeepAliveExtPtr ptr = new RegistryPrxCallbackPromise::PromisekeepAliveExt();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepAliveExt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepAliveExt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_keepAliveExt(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerNodeExt_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromiseregisterNodeExtPtr ptr = new RegistryPrxCallbackPromise::PromiseregisterNodeExt();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_registerNodeExt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_registerNodeExt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_registerNodeExt(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updatePacket_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromiseupdatePacketPtr ptr = new RegistryPrxCallbackPromise::PromiseupdatePacket();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->rsp, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_updatePacket_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updatePacket_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_updatePacket(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<RegistryPrxCallbackPromise> RegistryPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class RegistryCoroPrxCallback: public RegistryPrxCallback
    {
    public:
        virtual ~RegistryCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Registry_all[]=
            {
                "checkChange",
                "keepAliveExt",
                "registerNodeExt",
                "updatePacket"
            };

            pair<string*, string*> r = equal_range(__Registry_all, __Registry_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Registry_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_checkChange_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        Tseer::PackageInfo rspinfo;
                        _is.read(rspinfo, 2, true);
                        setResponseContext(msg->response.context);

                        callback_checkChange(_ret, rspinfo);

                    }
                    catch(std::exception &ex)
                    {
                        callback_checkChange_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_checkChange_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAliveExt_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_keepAliveExt(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepAliveExt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepAliveExt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerNodeExt_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_registerNodeExt(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_registerNodeExt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_registerNodeExt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updatePacket_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        Tseer::UpdateRsp rsp;
                        _is.read(rsp, 2, true);
                        setResponseContext(msg->response.context);

                        callback_updatePacket(_ret, rsp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updatePacket_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updatePacket_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<RegistryCoroPrxCallback> RegistryCoroPrxCallbackPtr;

    /* proxy for client */
    class RegistryProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        tars::Int32 checkChange(const Tseer::PackageInfo & reqInfo,Tseer::PackageInfo &rspinfo,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(reqInfo, 1);
            _os.write(rspinfo, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"checkChange", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(rspinfo, 2, true);
            return _ret;
        }

        void async_checkChange(RegistryPrxCallbackPtr callback,const Tseer::PackageInfo &reqInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(reqInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"checkChange", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromisecheckChangePtr > promise_async_checkChange(const Tseer::PackageInfo &reqInfo,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromisecheckChangePtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(reqInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"checkChange", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_checkChange(RegistryCoroPrxCallbackPtr callback,const Tseer::PackageInfo &reqInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(reqInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"checkChange", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 keepAliveExt(const Tseer::NodeInstanceInfo & nodeInfo,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeInfo, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"keepAliveExt", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_keepAliveExt(RegistryPrxCallbackPtr callback,const Tseer::NodeInstanceInfo &nodeInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAliveExt", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromisekeepAliveExtPtr > promise_async_keepAliveExt(const Tseer::NodeInstanceInfo &nodeInfo,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromisekeepAliveExtPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAliveExt", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_keepAliveExt(RegistryCoroPrxCallbackPtr callback,const Tseer::NodeInstanceInfo &nodeInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAliveExt", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 registerNodeExt(const Tseer::NodeInstanceInfo & nodeInfo,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeInfo, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"registerNodeExt", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_registerNodeExt(RegistryPrxCallbackPtr callback,const Tseer::NodeInstanceInfo &nodeInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerNodeExt", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromiseregisterNodeExtPtr > promise_async_registerNodeExt(const Tseer::NodeInstanceInfo &nodeInfo,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromiseregisterNodeExtPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerNodeExt", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_registerNodeExt(RegistryCoroPrxCallbackPtr callback,const Tseer::NodeInstanceInfo &nodeInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerNodeExt", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 updatePacket(const Tseer::UpdateReq & req,Tseer::UpdateRsp &rsp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            _os.write(rsp, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"updatePacket", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(rsp, 2, true);
            return _ret;
        }

        void async_updatePacket(RegistryPrxCallbackPtr callback,const Tseer::UpdateReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updatePacket", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromiseupdatePacketPtr > promise_async_updatePacket(const Tseer::UpdateReq &req,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromiseupdatePacketPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updatePacket", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_updatePacket(RegistryCoroPrxCallbackPtr callback,const Tseer::UpdateReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updatePacket", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        RegistryProxy* tars_hash(int64_t key)
        {
            return (RegistryProxy*)ServantProxy::tars_hash(key);
        }

        RegistryProxy* tars_consistent_hash(int64_t key)
        {
            return (RegistryProxy*)ServantProxy::tars_consistent_hash(key);
        }

        RegistryProxy* tars_set_timeout(int msecond)
        {
            return (RegistryProxy*)ServantProxy::tars_set_timeout(msecond);
        }

    };
    typedef tars::TC_AutoPtr<RegistryProxy> RegistryPrx;

    /* servant for server */
    class Registry : public tars::Servant
    {
    public:
        virtual ~Registry(){}
        virtual tars::Int32 checkChange(const Tseer::PackageInfo & reqInfo,Tseer::PackageInfo &rspinfo,tars::TarsCurrentPtr current) = 0;
        static void async_response_checkChange(tars::TarsCurrentPtr current, tars::Int32 _ret, const Tseer::PackageInfo &rspinfo)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("rspinfo", rspinfo);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(rspinfo, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 keepAliveExt(const Tseer::NodeInstanceInfo & nodeInfo,tars::TarsCurrentPtr current) = 0;
        static void async_response_keepAliveExt(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 registerNodeExt(const Tseer::NodeInstanceInfo & nodeInfo,tars::TarsCurrentPtr current) = 0;
        static void async_response_registerNodeExt(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 updatePacket(const Tseer::UpdateReq & req,Tseer::UpdateRsp &rsp,tars::TarsCurrentPtr current) = 0;
        static void async_response_updatePacket(tars::TarsCurrentPtr current, tars::Int32 _ret, const Tseer::UpdateRsp &rsp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("rsp", rsp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(rsp, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __Tseer__Registry_all[]=
            {
                "checkChange",
                "keepAliveExt",
                "registerNodeExt",
                "updatePacket"
            };

            pair<string*, string*> r = equal_range(__Tseer__Registry_all, __Tseer__Registry_all+4, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Tseer__Registry_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Tseer::PackageInfo reqInfo;
                    Tseer::PackageInfo rspinfo;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("reqInfo", reqInfo);
                        tarsAttr.getByDefault("rspinfo", rspinfo, rspinfo);
                    }
                    else
                    {
                        _is.read(reqInfo, 1, true);
                        _is.read(rspinfo, 2, false);
                    }
                    tars::Int32 _ret = checkChange(reqInfo,rspinfo, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("rspinfo", rspinfo);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(rspinfo, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Tseer::NodeInstanceInfo nodeInfo;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("nodeInfo", nodeInfo);
                    }
                    else
                    {
                        _is.read(nodeInfo, 1, true);
                    }
                    tars::Int32 _ret = keepAliveExt(nodeInfo, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Tseer::NodeInstanceInfo nodeInfo;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("nodeInfo", nodeInfo);
                    }
                    else
                    {
                        _is.read(nodeInfo, 1, true);
                    }
                    tars::Int32 _ret = registerNodeExt(nodeInfo, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Tseer::UpdateReq req;
                    Tseer::UpdateRsp rsp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("req", req);
                        tarsAttr.getByDefault("rsp", rsp, rsp);
                    }
                    else
                    {
                        _is.read(req, 1, true);
                        _is.read(rsp, 2, false);
                    }
                    tars::Int32 _ret = updatePacket(req,rsp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("rsp", rsp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(rsp, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
