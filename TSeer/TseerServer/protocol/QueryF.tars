module Tseer
{
    /**
     * 端口信息
     */
    struct EndpointF
    {
        0 require string host;
        1 require int port;
        2 require int timeout;
        3 require int istcp;
        4 require int grid;
        5 optional int groupworkid;
        6 optional int grouprealid;
        7 optional string setId;
        8 optional int qos;
        9 optional int bakFlag;
        11 optional int weight;
        12 optional int weightType;
    };
    key[EndpointF, host, port, timeout, istcp, grid, qos, weight, weightType];
    
    /** 
     * 获取对象endpoint的query接口
     */

    interface QueryF
    {
        /** 根据id获取对象
         *
         * @param id 对象名称
         *
         * @return  返回所有该对象的活动endpoint列表
         */
        vector<EndpointF> findObjectById(string id);
        
        /**根据id获取所有对象,包括活动和非活动对象
        *
         * @param id         对象名称
         * @param activeEp   存活endpoint列表
         * @param inactiveEp 非存活endpoint列表
         * @return:  0-成功  others-失败
         */
        int findObjectById4Any(string id, out vector<EndpointF> activeEp, out vector<EndpointF> inactiveEp);

        /** 根据id获取对象所有endpoint列表,功能同findObjectByIdInSameGroup
         *
         * @param id         对象名称
         * @param activeEp   存活endpoint列表
         * @param inactiveEp 非存活endpoint列表
         * @return:  0-成功  others-失败
         */
        int findObjectById4All(string id, out vector<EndpointF> activeEp, out vector<EndpointF> inactiveEp);
        
        /** 根据id获取对象同组endpoint列表
         *
         * @param id         对象名称
         * @param activeEp   存活endpoint列表
         * @param inactiveEp 非存活endpoint列表
         * @return:  0-成功  others-失败
         */
        int findObjectByIdInSameGroup(string id, out vector<EndpointF> activeEp, out vector<EndpointF> inactiveEp);


        /** 根据id获取对象指定归属地的endpoint列表
         *
         * @param id         对象名称
         * @param activeEp   存活endpoint列表
         * @param inactiveEp 非存活endpoint列表
         * @return:  0-成功  others-失败
         */
        int findObjectByIdInSameStation(string id, string sStation, out vector<EndpointF> activeEp, out vector<EndpointF> inactiveEp);
        
        /** 根据id获取对象同组endpoint列表
        *
        * @param id         对象名称
        * @param setId      set全称,格式为setname.setarea.setgroup
        * @param activeEp   存活endpoint列表
        * @param inactiveEp 非存活endpoint列表
        * @return:  0-成功  others-失败
        */
        int findObjectByIdInSameSet(string id, string setId, out vector<EndpointF> activeEp, out vector<EndpointF> inactiveEp);
    };
};


