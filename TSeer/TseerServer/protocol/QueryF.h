// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __QUERYF_H_
#define __QUERYF_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace Tseer
{
    struct EndpointF : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "Tseer.EndpointF";
        }
        static string MD5()
        {
            return "5275144a12be07f409470763962f1e37";
        }
        EndpointF()
        :host(""),port(0),timeout(0),istcp(0),grid(0),groupworkid(0),grouprealid(0),setId(""),qos(0),bakFlag(0),weight(0),weightType(0)
        {
        }
        void resetDefautlt()
        {
            host = "";
            port = 0;
            timeout = 0;
            istcp = 0;
            grid = 0;
            groupworkid = 0;
            grouprealid = 0;
            setId = "";
            qos = 0;
            bakFlag = 0;
            weight = 0;
            weightType = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(host, 0);
            _os.write(port, 1);
            _os.write(timeout, 2);
            _os.write(istcp, 3);
            _os.write(grid, 4);
            if (groupworkid != 0)
            {
                _os.write(groupworkid, 5);
            }
            if (grouprealid != 0)
            {
                _os.write(grouprealid, 6);
            }
            if (setId != "")
            {
                _os.write(setId, 7);
            }
            if (qos != 0)
            {
                _os.write(qos, 8);
            }
            if (bakFlag != 0)
            {
                _os.write(bakFlag, 9);
            }
            if (weight != 0)
            {
                _os.write(weight, 11);
            }
            if (weightType != 0)
            {
                _os.write(weightType, 12);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(host, 0, true);
            _is.read(port, 1, true);
            _is.read(timeout, 2, true);
            _is.read(istcp, 3, true);
            _is.read(grid, 4, true);
            _is.read(groupworkid, 5, false);
            _is.read(grouprealid, 6, false);
            _is.read(setId, 7, false);
            _is.read(qos, 8, false);
            _is.read(bakFlag, 9, false);
            _is.read(weight, 11, false);
            _is.read(weightType, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(host,"host");
            _ds.display(port,"port");
            _ds.display(timeout,"timeout");
            _ds.display(istcp,"istcp");
            _ds.display(grid,"grid");
            _ds.display(groupworkid,"groupworkid");
            _ds.display(grouprealid,"grouprealid");
            _ds.display(setId,"setId");
            _ds.display(qos,"qos");
            _ds.display(bakFlag,"bakFlag");
            _ds.display(weight,"weight");
            _ds.display(weightType,"weightType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(host, true);
            _ds.displaySimple(port, true);
            _ds.displaySimple(timeout, true);
            _ds.displaySimple(istcp, true);
            _ds.displaySimple(grid, true);
            _ds.displaySimple(groupworkid, true);
            _ds.displaySimple(grouprealid, true);
            _ds.displaySimple(setId, true);
            _ds.displaySimple(qos, true);
            _ds.displaySimple(bakFlag, true);
            _ds.displaySimple(weight, true);
            _ds.displaySimple(weightType, false);
            return _os;
        }
    public:
        std::string host;
        tars::Int32 port;
        tars::Int32 timeout;
        tars::Int32 istcp;
        tars::Int32 grid;
        tars::Int32 groupworkid;
        tars::Int32 grouprealid;
        std::string setId;
        tars::Int32 qos;
        tars::Int32 bakFlag;
        tars::Int32 weight;
        tars::Int32 weightType;
    };
    inline bool operator==(const EndpointF&l, const EndpointF&r)
    {
        return l.host == r.host && l.port == r.port && l.timeout == r.timeout && l.istcp == r.istcp && l.grid == r.grid && l.groupworkid == r.groupworkid && l.grouprealid == r.grouprealid && l.setId == r.setId && l.qos == r.qos && l.bakFlag == r.bakFlag && l.weight == r.weight && l.weightType == r.weightType;
    }
    inline bool operator!=(const EndpointF&l, const EndpointF&r)
    {
        return !(l == r);
    }
    inline bool operator<(const EndpointF&l, const EndpointF&r)
    {
        if(l.host != r.host)  return (l.host < r.host);
        if(l.port != r.port)  return (l.port < r.port);
        if(l.timeout != r.timeout)  return (l.timeout < r.timeout);
        if(l.istcp != r.istcp)  return (l.istcp < r.istcp);
        if(l.grid != r.grid)  return (l.grid < r.grid);
        if(l.qos != r.qos)  return (l.qos < r.qos);
        if(l.weight != r.weight)  return (l.weight < r.weight);
        if(l.weightType != r.weightType)  return (l.weightType < r.weightType);
        return false;
    }
    inline bool operator<=(const EndpointF&l, const EndpointF&r)
    {
        return !(r < l);
    }
    inline bool operator>(const EndpointF&l, const EndpointF&r)
    {
        return r < l;
    }
    inline bool operator>=(const EndpointF&l, const EndpointF&r)
    {
        return !(l < r);
    }


    /* callback of async proxy for client */
    class QueryFPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~QueryFPrxCallback(){}
        virtual void callback_findObjectById(const vector<Tseer::EndpointF>& ret)
        { throw std::runtime_error("callback_findObjectById() override incorrect."); }
        virtual void callback_findObjectById_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectById_exception() override incorrect."); }

        virtual void callback_findObjectById4All(tars::Int32 ret,  const vector<Tseer::EndpointF>& activeEp,  const vector<Tseer::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectById4All() override incorrect."); }
        virtual void callback_findObjectById4All_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectById4All_exception() override incorrect."); }

        virtual void callback_findObjectById4Any(tars::Int32 ret,  const vector<Tseer::EndpointF>& activeEp,  const vector<Tseer::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectById4Any() override incorrect."); }
        virtual void callback_findObjectById4Any_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectById4Any_exception() override incorrect."); }

        virtual void callback_findObjectByIdInSameGroup(tars::Int32 ret,  const vector<Tseer::EndpointF>& activeEp,  const vector<Tseer::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectByIdInSameGroup() override incorrect."); }
        virtual void callback_findObjectByIdInSameGroup_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectByIdInSameGroup_exception() override incorrect."); }

        virtual void callback_findObjectByIdInSameSet(tars::Int32 ret,  const vector<Tseer::EndpointF>& activeEp,  const vector<Tseer::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectByIdInSameSet() override incorrect."); }
        virtual void callback_findObjectByIdInSameSet_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectByIdInSameSet_exception() override incorrect."); }

        virtual void callback_findObjectByIdInSameStation(tars::Int32 ret,  const vector<Tseer::EndpointF>& activeEp,  const vector<Tseer::EndpointF>& inactiveEp)
        { throw std::runtime_error("callback_findObjectByIdInSameStation() override incorrect."); }
        virtual void callback_findObjectByIdInSameStation_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_findObjectByIdInSameStation_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __QueryF_all[]=
            {
                "findObjectById",
                "findObjectById4All",
                "findObjectById4Any",
                "findObjectByIdInSameGroup",
                "findObjectByIdInSameSet",
                "findObjectByIdInSameStation"
            };
            pair<string*, string*> r = equal_range(__QueryF_all, __QueryF_all+6, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __QueryF_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    vector<Tseer::EndpointF> _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_findObjectById(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById4All_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<Tseer::EndpointF> activeEp;
                    _is.read(activeEp, 2, true);
                    vector<Tseer::EndpointF> inactiveEp;
                    _is.read(inactiveEp, 3, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_findObjectById4All(_ret, activeEp, inactiveEp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById4Any_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<Tseer::EndpointF> activeEp;
                    _is.read(activeEp, 2, true);
                    vector<Tseer::EndpointF> inactiveEp;
                    _is.read(inactiveEp, 3, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_findObjectById4Any(_ret, activeEp, inactiveEp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameGroup_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<Tseer::EndpointF> activeEp;
                    _is.read(activeEp, 2, true);
                    vector<Tseer::EndpointF> inactiveEp;
                    _is.read(inactiveEp, 3, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_findObjectByIdInSameGroup(_ret, activeEp, inactiveEp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameSet_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<Tseer::EndpointF> activeEp;
                    _is.read(activeEp, 3, true);
                    vector<Tseer::EndpointF> inactiveEp;
                    _is.read(inactiveEp, 4, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_findObjectByIdInSameSet(_ret, activeEp, inactiveEp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameStation_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<Tseer::EndpointF> activeEp;
                    _is.read(activeEp, 3, true);
                    vector<Tseer::EndpointF> inactiveEp;
                    _is.read(inactiveEp, 4, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_findObjectByIdInSameStation(_ret, activeEp, inactiveEp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<QueryFPrxCallback> QueryFPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class QueryFPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~QueryFPrxCallbackPromise(){}
    public:
        struct PromisefindObjectById: virtual public TC_HandleBase
        {
        public:
            vector<Tseer::EndpointF> _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectById > PromisefindObjectByIdPtr;

        QueryFPrxCallbackPromise(const promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdPtr > &promise)
        : _promise_findObjectById(promise)
        {}
        
        virtual void callback_findObjectById(const QueryFPrxCallbackPromise::PromisefindObjectByIdPtr &ptr)
        {
            _promise_findObjectById.setValue(ptr);
        }
        virtual void callback_findObjectById_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectById_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectById.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdPtr > _promise_findObjectById;

    public:
        struct PromisefindObjectById4All: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<Tseer::EndpointF> activeEp;
            vector<Tseer::EndpointF> inactiveEp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectById4All > PromisefindObjectById4AllPtr;

        QueryFPrxCallbackPromise(const promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr > &promise)
        : _promise_findObjectById4All(promise)
        {}
        
        virtual void callback_findObjectById4All(const QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr &ptr)
        {
            _promise_findObjectById4All.setValue(ptr);
        }
        virtual void callback_findObjectById4All_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectById4All_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectById4All.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr > _promise_findObjectById4All;

    public:
        struct PromisefindObjectById4Any: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<Tseer::EndpointF> activeEp;
            vector<Tseer::EndpointF> inactiveEp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectById4Any > PromisefindObjectById4AnyPtr;

        QueryFPrxCallbackPromise(const promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr > &promise)
        : _promise_findObjectById4Any(promise)
        {}
        
        virtual void callback_findObjectById4Any(const QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr &ptr)
        {
            _promise_findObjectById4Any.setValue(ptr);
        }
        virtual void callback_findObjectById4Any_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectById4Any_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectById4Any.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr > _promise_findObjectById4Any;

    public:
        struct PromisefindObjectByIdInSameGroup: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<Tseer::EndpointF> activeEp;
            vector<Tseer::EndpointF> inactiveEp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroup > PromisefindObjectByIdInSameGroupPtr;

        QueryFPrxCallbackPromise(const promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr > &promise)
        : _promise_findObjectByIdInSameGroup(promise)
        {}
        
        virtual void callback_findObjectByIdInSameGroup(const QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr &ptr)
        {
            _promise_findObjectByIdInSameGroup.setValue(ptr);
        }
        virtual void callback_findObjectByIdInSameGroup_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectByIdInSameGroup_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectByIdInSameGroup.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr > _promise_findObjectByIdInSameGroup;

    public:
        struct PromisefindObjectByIdInSameSet: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<Tseer::EndpointF> activeEp;
            vector<Tseer::EndpointF> inactiveEp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSet > PromisefindObjectByIdInSameSetPtr;

        QueryFPrxCallbackPromise(const promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr > &promise)
        : _promise_findObjectByIdInSameSet(promise)
        {}
        
        virtual void callback_findObjectByIdInSameSet(const QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr &ptr)
        {
            _promise_findObjectByIdInSameSet.setValue(ptr);
        }
        virtual void callback_findObjectByIdInSameSet_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectByIdInSameSet_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectByIdInSameSet.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr > _promise_findObjectByIdInSameSet;

    public:
        struct PromisefindObjectByIdInSameStation: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<Tseer::EndpointF> activeEp;
            vector<Tseer::EndpointF> inactiveEp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStation > PromisefindObjectByIdInSameStationPtr;

        QueryFPrxCallbackPromise(const promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr > &promise)
        : _promise_findObjectByIdInSameStation(promise)
        {}
        
        virtual void callback_findObjectByIdInSameStation(const QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr &ptr)
        {
            _promise_findObjectByIdInSameStation.setValue(ptr);
        }
        virtual void callback_findObjectByIdInSameStation_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:findObjectByIdInSameStation_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_findObjectByIdInSameStation.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr > _promise_findObjectByIdInSameStation;

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __QueryF_all[]=
            {
                "findObjectById",
                "findObjectById4All",
                "findObjectById4Any",
                "findObjectByIdInSameGroup",
                "findObjectByIdInSameSet",
                "findObjectByIdInSameStation"
            };

            pair<string*, string*> r = equal_range(__QueryF_all, __QueryF_all+6, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __QueryF_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    QueryFPrxCallbackPromise::PromisefindObjectByIdPtr ptr = new QueryFPrxCallbackPromise::PromisefindObjectById();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectById_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectById_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_findObjectById(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById4All_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr ptr = new QueryFPrxCallbackPromise::PromisefindObjectById4All();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->activeEp, 2, true);
                        _is.read(ptr->inactiveEp, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectById4All_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectById4All_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_findObjectById4All(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById4Any_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr ptr = new QueryFPrxCallbackPromise::PromisefindObjectById4Any();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->activeEp, 2, true);
                        _is.read(ptr->inactiveEp, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectById4Any_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectById4Any_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_findObjectById4Any(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameGroup_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr ptr = new QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroup();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->activeEp, 2, true);
                        _is.read(ptr->inactiveEp, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectByIdInSameGroup_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectByIdInSameGroup_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_findObjectByIdInSameGroup(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameSet_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr ptr = new QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSet();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->activeEp, 3, true);
                        _is.read(ptr->inactiveEp, 4, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectByIdInSameSet_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectByIdInSameSet_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_findObjectByIdInSameSet(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameStation_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr ptr = new QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStation();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->activeEp, 3, true);
                        _is.read(ptr->inactiveEp, 4, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectByIdInSameStation_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectByIdInSameStation_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_findObjectByIdInSameStation(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<QueryFPrxCallbackPromise> QueryFPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class QueryFCoroPrxCallback: public QueryFPrxCallback
    {
    public:
        virtual ~QueryFCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __QueryF_all[]=
            {
                "findObjectById",
                "findObjectById4All",
                "findObjectById4Any",
                "findObjectByIdInSameGroup",
                "findObjectByIdInSameSet",
                "findObjectByIdInSameStation"
            };

            pair<string*, string*> r = equal_range(__QueryF_all, __QueryF_all+6, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __QueryF_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        vector<Tseer::EndpointF> _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_findObjectById(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectById_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectById_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById4All_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<Tseer::EndpointF> activeEp;
                        _is.read(activeEp, 2, true);
                        vector<Tseer::EndpointF> inactiveEp;
                        _is.read(inactiveEp, 3, true);
                        setResponseContext(msg->response.context);

                        callback_findObjectById4All(_ret, activeEp, inactiveEp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectById4All_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectById4All_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectById4Any_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<Tseer::EndpointF> activeEp;
                        _is.read(activeEp, 2, true);
                        vector<Tseer::EndpointF> inactiveEp;
                        _is.read(inactiveEp, 3, true);
                        setResponseContext(msg->response.context);

                        callback_findObjectById4Any(_ret, activeEp, inactiveEp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectById4Any_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectById4Any_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameGroup_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<Tseer::EndpointF> activeEp;
                        _is.read(activeEp, 2, true);
                        vector<Tseer::EndpointF> inactiveEp;
                        _is.read(inactiveEp, 3, true);
                        setResponseContext(msg->response.context);

                        callback_findObjectByIdInSameGroup(_ret, activeEp, inactiveEp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectByIdInSameGroup_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectByIdInSameGroup_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameSet_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<Tseer::EndpointF> activeEp;
                        _is.read(activeEp, 3, true);
                        vector<Tseer::EndpointF> inactiveEp;
                        _is.read(inactiveEp, 4, true);
                        setResponseContext(msg->response.context);

                        callback_findObjectByIdInSameSet(_ret, activeEp, inactiveEp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectByIdInSameSet_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectByIdInSameSet_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_findObjectByIdInSameStation_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<Tseer::EndpointF> activeEp;
                        _is.read(activeEp, 3, true);
                        vector<Tseer::EndpointF> inactiveEp;
                        _is.read(inactiveEp, 4, true);
                        setResponseContext(msg->response.context);

                        callback_findObjectByIdInSameStation(_ret, activeEp, inactiveEp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_findObjectByIdInSameStation_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_findObjectByIdInSameStation_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<QueryFCoroPrxCallback> QueryFCoroPrxCallbackPtr;

    /* proxy for client */
    class QueryFProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        vector<Tseer::EndpointF> findObjectById(const std::string & id,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"findObjectById", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            vector<Tseer::EndpointF> _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_findObjectById(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< QueryFPrxCallbackPromise::PromisefindObjectByIdPtr > promise_async_findObjectById(const std::string &id,const map<string, string>& context)
        {
            promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdPtr > promise;
            QueryFPrxCallbackPromisePtr callback = new QueryFPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_findObjectById(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 findObjectById4All(const std::string & id,vector<Tseer::EndpointF> &activeEp,vector<Tseer::EndpointF> &inactiveEp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            _os.write(activeEp, 2);
            _os.write(inactiveEp, 3);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"findObjectById4All", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(activeEp, 2, true);
            _is.read(inactiveEp, 3, true);
            return _ret;
        }

        void async_findObjectById4All(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById4All", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr > promise_async_findObjectById4All(const std::string &id,const map<string, string>& context)
        {
            promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AllPtr > promise;
            QueryFPrxCallbackPromisePtr callback = new QueryFPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById4All", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_findObjectById4All(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById4All", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 findObjectById4Any(const std::string & id,vector<Tseer::EndpointF> &activeEp,vector<Tseer::EndpointF> &inactiveEp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            _os.write(activeEp, 2);
            _os.write(inactiveEp, 3);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"findObjectById4Any", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(activeEp, 2, true);
            _is.read(inactiveEp, 3, true);
            return _ret;
        }

        void async_findObjectById4Any(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById4Any", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr > promise_async_findObjectById4Any(const std::string &id,const map<string, string>& context)
        {
            promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectById4AnyPtr > promise;
            QueryFPrxCallbackPromisePtr callback = new QueryFPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById4Any", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_findObjectById4Any(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectById4Any", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 findObjectByIdInSameGroup(const std::string & id,vector<Tseer::EndpointF> &activeEp,vector<Tseer::EndpointF> &inactiveEp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            _os.write(activeEp, 2);
            _os.write(inactiveEp, 3);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"findObjectByIdInSameGroup", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(activeEp, 2, true);
            _is.read(inactiveEp, 3, true);
            return _ret;
        }

        void async_findObjectByIdInSameGroup(QueryFPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameGroup", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr > promise_async_findObjectByIdInSameGroup(const std::string &id,const map<string, string>& context)
        {
            promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameGroupPtr > promise;
            QueryFPrxCallbackPromisePtr callback = new QueryFPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameGroup", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_findObjectByIdInSameGroup(QueryFCoroPrxCallbackPtr callback,const std::string &id,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameGroup", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 findObjectByIdInSameSet(const std::string & id,const std::string & setId,vector<Tseer::EndpointF> &activeEp,vector<Tseer::EndpointF> &inactiveEp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            _os.write(setId, 2);
            _os.write(activeEp, 3);
            _os.write(inactiveEp, 4);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"findObjectByIdInSameSet", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(activeEp, 3, true);
            _is.read(inactiveEp, 4, true);
            return _ret;
        }

        void async_findObjectByIdInSameSet(QueryFPrxCallbackPtr callback,const std::string &id,const std::string &setId,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            _os.write(setId, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameSet", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr > promise_async_findObjectByIdInSameSet(const std::string &id,const std::string &setId,const map<string, string>& context)
        {
            promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameSetPtr > promise;
            QueryFPrxCallbackPromisePtr callback = new QueryFPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            _os.write(setId, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameSet", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_findObjectByIdInSameSet(QueryFCoroPrxCallbackPtr callback,const std::string &id,const std::string &setId,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            _os.write(setId, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameSet", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 findObjectByIdInSameStation(const std::string & id,const std::string & sStation,vector<Tseer::EndpointF> &activeEp,vector<Tseer::EndpointF> &inactiveEp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            _os.write(sStation, 2);
            _os.write(activeEp, 3);
            _os.write(inactiveEp, 4);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"findObjectByIdInSameStation", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(activeEp, 3, true);
            _is.read(inactiveEp, 4, true);
            return _ret;
        }

        void async_findObjectByIdInSameStation(QueryFPrxCallbackPtr callback,const std::string &id,const std::string &sStation,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            _os.write(sStation, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameStation", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr > promise_async_findObjectByIdInSameStation(const std::string &id,const std::string &sStation,const map<string, string>& context)
        {
            promise::Promise< QueryFPrxCallbackPromise::PromisefindObjectByIdInSameStationPtr > promise;
            QueryFPrxCallbackPromisePtr callback = new QueryFPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            _os.write(sStation, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameStation", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_findObjectByIdInSameStation(QueryFCoroPrxCallbackPtr callback,const std::string &id,const std::string &sStation,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(id, 1);
            _os.write(sStation, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"findObjectByIdInSameStation", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        QueryFProxy* tars_hash(int64_t key)
        {
            return (QueryFProxy*)ServantProxy::tars_hash(key);
        }

        QueryFProxy* tars_consistent_hash(int64_t key)
        {
            return (QueryFProxy*)ServantProxy::tars_consistent_hash(key);
        }

        QueryFProxy* tars_set_timeout(int msecond)
        {
            return (QueryFProxy*)ServantProxy::tars_set_timeout(msecond);
        }

    };
    typedef tars::TC_AutoPtr<QueryFProxy> QueryFPrx;

    /* servant for server */
    class QueryF : public tars::Servant
    {
    public:
        virtual ~QueryF(){}
        virtual vector<Tseer::EndpointF> findObjectById(const std::string & id,tars::TarsCurrentPtr current) = 0;
        static void async_response_findObjectById(tars::TarsCurrentPtr current, const vector<Tseer::EndpointF> &_ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 findObjectById4All(const std::string & id,vector<Tseer::EndpointF> &activeEp,vector<Tseer::EndpointF> &inactiveEp,tars::TarsCurrentPtr current) = 0;
        static void async_response_findObjectById4All(tars::TarsCurrentPtr current, tars::Int32 _ret, const vector<Tseer::EndpointF> &activeEp, const vector<Tseer::EndpointF> &inactiveEp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("activeEp", activeEp);
                tarsAttr.put("inactiveEp", inactiveEp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 2);

                _os.write(inactiveEp, 3);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 findObjectById4Any(const std::string & id,vector<Tseer::EndpointF> &activeEp,vector<Tseer::EndpointF> &inactiveEp,tars::TarsCurrentPtr current) = 0;
        static void async_response_findObjectById4Any(tars::TarsCurrentPtr current, tars::Int32 _ret, const vector<Tseer::EndpointF> &activeEp, const vector<Tseer::EndpointF> &inactiveEp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("activeEp", activeEp);
                tarsAttr.put("inactiveEp", inactiveEp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 2);

                _os.write(inactiveEp, 3);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 findObjectByIdInSameGroup(const std::string & id,vector<Tseer::EndpointF> &activeEp,vector<Tseer::EndpointF> &inactiveEp,tars::TarsCurrentPtr current) = 0;
        static void async_response_findObjectByIdInSameGroup(tars::TarsCurrentPtr current, tars::Int32 _ret, const vector<Tseer::EndpointF> &activeEp, const vector<Tseer::EndpointF> &inactiveEp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("activeEp", activeEp);
                tarsAttr.put("inactiveEp", inactiveEp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 2);

                _os.write(inactiveEp, 3);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 findObjectByIdInSameSet(const std::string & id,const std::string & setId,vector<Tseer::EndpointF> &activeEp,vector<Tseer::EndpointF> &inactiveEp,tars::TarsCurrentPtr current) = 0;
        static void async_response_findObjectByIdInSameSet(tars::TarsCurrentPtr current, tars::Int32 _ret, const vector<Tseer::EndpointF> &activeEp, const vector<Tseer::EndpointF> &inactiveEp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("activeEp", activeEp);
                tarsAttr.put("inactiveEp", inactiveEp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 3);

                _os.write(inactiveEp, 4);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 findObjectByIdInSameStation(const std::string & id,const std::string & sStation,vector<Tseer::EndpointF> &activeEp,vector<Tseer::EndpointF> &inactiveEp,tars::TarsCurrentPtr current) = 0;
        static void async_response_findObjectByIdInSameStation(tars::TarsCurrentPtr current, tars::Int32 _ret, const vector<Tseer::EndpointF> &activeEp, const vector<Tseer::EndpointF> &inactiveEp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("activeEp", activeEp);
                tarsAttr.put("inactiveEp", inactiveEp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(activeEp, 3);

                _os.write(inactiveEp, 4);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __Tseer__QueryF_all[]=
            {
                "findObjectById",
                "findObjectById4All",
                "findObjectById4Any",
                "findObjectByIdInSameGroup",
                "findObjectByIdInSameSet",
                "findObjectByIdInSameStation"
            };

            pair<string*, string*> r = equal_range(__Tseer__QueryF_all, __Tseer__QueryF_all+6, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Tseer__QueryF_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("id", id);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                    }
                    vector<Tseer::EndpointF> _ret = findObjectById(id, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    vector<Tseer::EndpointF> activeEp;
                    vector<Tseer::EndpointF> inactiveEp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("id", id);
                        tarsAttr.getByDefault("activeEp", activeEp, activeEp);
                        tarsAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(activeEp, 2, false);
                        _is.read(inactiveEp, 3, false);
                    }
                    tars::Int32 _ret = findObjectById4All(id,activeEp,inactiveEp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("activeEp", activeEp);
                            tarsAttr.put("inactiveEp", inactiveEp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(activeEp, 2);
                            _os.write(inactiveEp, 3);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    vector<Tseer::EndpointF> activeEp;
                    vector<Tseer::EndpointF> inactiveEp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("id", id);
                        tarsAttr.getByDefault("activeEp", activeEp, activeEp);
                        tarsAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(activeEp, 2, false);
                        _is.read(inactiveEp, 3, false);
                    }
                    tars::Int32 _ret = findObjectById4Any(id,activeEp,inactiveEp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("activeEp", activeEp);
                            tarsAttr.put("inactiveEp", inactiveEp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(activeEp, 2);
                            _os.write(inactiveEp, 3);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    vector<Tseer::EndpointF> activeEp;
                    vector<Tseer::EndpointF> inactiveEp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("id", id);
                        tarsAttr.getByDefault("activeEp", activeEp, activeEp);
                        tarsAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(activeEp, 2, false);
                        _is.read(inactiveEp, 3, false);
                    }
                    tars::Int32 _ret = findObjectByIdInSameGroup(id,activeEp,inactiveEp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("activeEp", activeEp);
                            tarsAttr.put("inactiveEp", inactiveEp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(activeEp, 2);
                            _os.write(inactiveEp, 3);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    std::string setId;
                    vector<Tseer::EndpointF> activeEp;
                    vector<Tseer::EndpointF> inactiveEp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("id", id);
                        tarsAttr.get("setId", setId);
                        tarsAttr.getByDefault("activeEp", activeEp, activeEp);
                        tarsAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(setId, 2, true);
                        _is.read(activeEp, 3, false);
                        _is.read(inactiveEp, 4, false);
                    }
                    tars::Int32 _ret = findObjectByIdInSameSet(id,setId,activeEp,inactiveEp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("activeEp", activeEp);
                            tarsAttr.put("inactiveEp", inactiveEp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(activeEp, 3);
                            _os.write(inactiveEp, 4);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string id;
                    std::string sStation;
                    vector<Tseer::EndpointF> activeEp;
                    vector<Tseer::EndpointF> inactiveEp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("id", id);
                        tarsAttr.get("sStation", sStation);
                        tarsAttr.getByDefault("activeEp", activeEp, activeEp);
                        tarsAttr.getByDefault("inactiveEp", inactiveEp, inactiveEp);
                    }
                    else
                    {
                        _is.read(id, 1, true);
                        _is.read(sStation, 2, true);
                        _is.read(activeEp, 3, false);
                        _is.read(inactiveEp, 4, false);
                    }
                    tars::Int32 _ret = findObjectByIdInSameStation(id,sStation,activeEp,inactiveEp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("activeEp", activeEp);
                            tarsAttr.put("inactiveEp", inactiveEp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(activeEp, 3);
                            _os.write(inactiveEp, 4);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
