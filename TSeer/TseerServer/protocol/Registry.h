// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __REGISTRY_H_
#define __REGISTRY_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;
#include "RegistryDescriptor.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace Tseer
{

    /* callback of async proxy for client */
    class RegistryPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~RegistryPrxCallback(){}
        virtual void callback_checkChange(tars::Int32 ret,  const Tseer::PackageInfo& rspinfo)
        { throw std::runtime_error("callback_checkChange() override incorrect."); }
        virtual void callback_checkChange_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_checkChange_exception() override incorrect."); }

        virtual void callback_destroy(tars::Int32 ret)
        { throw std::runtime_error("callback_destroy() override incorrect."); }
        virtual void callback_destroy_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_destroy_exception() override incorrect."); }

        virtual void callback_keepAlive(tars::Int32 ret)
        { throw std::runtime_error("callback_keepAlive() override incorrect."); }
        virtual void callback_keepAlive_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_keepAlive_exception() override incorrect."); }

        virtual void callback_keepAliveExt(tars::Int32 ret)
        { throw std::runtime_error("callback_keepAliveExt() override incorrect."); }
        virtual void callback_keepAliveExt_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_keepAliveExt_exception() override incorrect."); }

        virtual void callback_pushPackage(tars::Int32 ret,  const std::string& result)
        { throw std::runtime_error("callback_pushPackage() override incorrect."); }
        virtual void callback_pushPackage_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_pushPackage_exception() override incorrect."); }

        virtual void callback_registerNode(tars::Int32 ret)
        { throw std::runtime_error("callback_registerNode() override incorrect."); }
        virtual void callback_registerNode_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_registerNode_exception() override incorrect."); }

        virtual void callback_registerNodeExt(tars::Int32 ret)
        { throw std::runtime_error("callback_registerNodeExt() override incorrect."); }
        virtual void callback_registerNodeExt_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_registerNodeExt_exception() override incorrect."); }

        virtual void callback_updatePacket(tars::Int32 ret,  const Tseer::UpdateRsp& rsp)
        { throw std::runtime_error("callback_updatePacket() override incorrect."); }
        virtual void callback_updatePacket_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_updatePacket_exception() override incorrect."); }

        virtual void callback_updateServer(tars::Int32 ret)
        { throw std::runtime_error("callback_updateServer() override incorrect."); }
        virtual void callback_updateServer_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_updateServer_exception() override incorrect."); }

        virtual void callback_updateServerBatch(tars::Int32 ret)
        { throw std::runtime_error("callback_updateServerBatch() override incorrect."); }
        virtual void callback_updateServerBatch_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_updateServerBatch_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Registry_all[]=
            {
                "checkChange",
                "destroy",
                "keepAlive",
                "keepAliveExt",
                "pushPackage",
                "registerNode",
                "registerNodeExt",
                "updatePacket",
                "updateServer",
                "updateServerBatch"
            };
            pair<string*, string*> r = equal_range(__Registry_all, __Registry_all+10, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Registry_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_checkChange_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    Tseer::PackageInfo rspinfo;
                    _is.read(rspinfo, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_checkChange(_ret, rspinfo);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_destroy_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_destroy(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_keepAlive(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAliveExt_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_keepAliveExt(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_pushPackage_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string result;
                    _is.read(result, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_pushPackage(_ret, result);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerNode_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_registerNode(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerNodeExt_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_registerNodeExt(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updatePacket_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    Tseer::UpdateRsp rsp;
                    _is.read(rsp, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_updatePacket(_ret, rsp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServer_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_updateServer(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServerBatch_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_updateServerBatch(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<RegistryPrxCallback> RegistryPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class RegistryPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~RegistryPrxCallbackPromise(){}
    public:
        struct PromisecheckChange: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            Tseer::PackageInfo rspinfo;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisecheckChange > PromisecheckChangePtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromisecheckChangePtr > &promise)
        : _promise_checkChange(promise)
        {}
        
        virtual void callback_checkChange(const RegistryPrxCallbackPromise::PromisecheckChangePtr &ptr)
        {
            _promise_checkChange.setValue(ptr);
        }
        virtual void callback_checkChange_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:checkChange_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_checkChange.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromisecheckChangePtr > _promise_checkChange;

    public:
        struct Promisedestroy: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::Promisedestroy > PromisedestroyPtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromisedestroyPtr > &promise)
        : _promise_destroy(promise)
        {}
        
        virtual void callback_destroy(const RegistryPrxCallbackPromise::PromisedestroyPtr &ptr)
        {
            _promise_destroy.setValue(ptr);
        }
        virtual void callback_destroy_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:destroy_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_destroy.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromisedestroyPtr > _promise_destroy;

    public:
        struct PromisekeepAlive: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisekeepAlive > PromisekeepAlivePtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromisekeepAlivePtr > &promise)
        : _promise_keepAlive(promise)
        {}
        
        virtual void callback_keepAlive(const RegistryPrxCallbackPromise::PromisekeepAlivePtr &ptr)
        {
            _promise_keepAlive.setValue(ptr);
        }
        virtual void callback_keepAlive_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:keepAlive_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_keepAlive.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromisekeepAlivePtr > _promise_keepAlive;

    public:
        struct PromisekeepAliveExt: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisekeepAliveExt > PromisekeepAliveExtPtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromisekeepAliveExtPtr > &promise)
        : _promise_keepAliveExt(promise)
        {}
        
        virtual void callback_keepAliveExt(const RegistryPrxCallbackPromise::PromisekeepAliveExtPtr &ptr)
        {
            _promise_keepAliveExt.setValue(ptr);
        }
        virtual void callback_keepAliveExt_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:keepAliveExt_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_keepAliveExt.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromisekeepAliveExtPtr > _promise_keepAliveExt;

    public:
        struct PromisepushPackage: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            std::string result;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisepushPackage > PromisepushPackagePtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromisepushPackagePtr > &promise)
        : _promise_pushPackage(promise)
        {}
        
        virtual void callback_pushPackage(const RegistryPrxCallbackPromise::PromisepushPackagePtr &ptr)
        {
            _promise_pushPackage.setValue(ptr);
        }
        virtual void callback_pushPackage_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:pushPackage_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_pushPackage.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromisepushPackagePtr > _promise_pushPackage;

    public:
        struct PromiseregisterNode: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromiseregisterNode > PromiseregisterNodePtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromiseregisterNodePtr > &promise)
        : _promise_registerNode(promise)
        {}
        
        virtual void callback_registerNode(const RegistryPrxCallbackPromise::PromiseregisterNodePtr &ptr)
        {
            _promise_registerNode.setValue(ptr);
        }
        virtual void callback_registerNode_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:registerNode_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_registerNode.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromiseregisterNodePtr > _promise_registerNode;

    public:
        struct PromiseregisterNodeExt: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromiseregisterNodeExt > PromiseregisterNodeExtPtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromiseregisterNodeExtPtr > &promise)
        : _promise_registerNodeExt(promise)
        {}
        
        virtual void callback_registerNodeExt(const RegistryPrxCallbackPromise::PromiseregisterNodeExtPtr &ptr)
        {
            _promise_registerNodeExt.setValue(ptr);
        }
        virtual void callback_registerNodeExt_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:registerNodeExt_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_registerNodeExt.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromiseregisterNodeExtPtr > _promise_registerNodeExt;

    public:
        struct PromiseupdatePacket: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            Tseer::UpdateRsp rsp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromiseupdatePacket > PromiseupdatePacketPtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromiseupdatePacketPtr > &promise)
        : _promise_updatePacket(promise)
        {}
        
        virtual void callback_updatePacket(const RegistryPrxCallbackPromise::PromiseupdatePacketPtr &ptr)
        {
            _promise_updatePacket.setValue(ptr);
        }
        virtual void callback_updatePacket_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:updatePacket_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_updatePacket.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromiseupdatePacketPtr > _promise_updatePacket;

    public:
        struct PromiseupdateServer: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromiseupdateServer > PromiseupdateServerPtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromiseupdateServerPtr > &promise)
        : _promise_updateServer(promise)
        {}
        
        virtual void callback_updateServer(const RegistryPrxCallbackPromise::PromiseupdateServerPtr &ptr)
        {
            _promise_updateServer.setValue(ptr);
        }
        virtual void callback_updateServer_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:updateServer_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_updateServer.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromiseupdateServerPtr > _promise_updateServer;

    public:
        struct PromiseupdateServerBatch: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromiseupdateServerBatch > PromiseupdateServerBatchPtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr > &promise)
        : _promise_updateServerBatch(promise)
        {}
        
        virtual void callback_updateServerBatch(const RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr &ptr)
        {
            _promise_updateServerBatch.setValue(ptr);
        }
        virtual void callback_updateServerBatch_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:updateServerBatch_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_updateServerBatch.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr > _promise_updateServerBatch;

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Registry_all[]=
            {
                "checkChange",
                "destroy",
                "keepAlive",
                "keepAliveExt",
                "pushPackage",
                "registerNode",
                "registerNodeExt",
                "updatePacket",
                "updateServer",
                "updateServerBatch"
            };

            pair<string*, string*> r = equal_range(__Registry_all, __Registry_all+10, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Registry_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_checkChange_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromisecheckChangePtr ptr = new RegistryPrxCallbackPromise::PromisecheckChange();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->rspinfo, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_checkChange_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_checkChange_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_checkChange(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_destroy_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromisedestroyPtr ptr = new RegistryPrxCallbackPromise::Promisedestroy();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_destroy_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_destroy_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_destroy(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromisekeepAlivePtr ptr = new RegistryPrxCallbackPromise::PromisekeepAlive();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepAlive_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepAlive_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_keepAlive(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAliveExt_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromisekeepAliveExtPtr ptr = new RegistryPrxCallbackPromise::PromisekeepAliveExt();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepAliveExt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepAliveExt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_keepAliveExt(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_pushPackage_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromisepushPackagePtr ptr = new RegistryPrxCallbackPromise::PromisepushPackage();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->result, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_pushPackage_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_pushPackage_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_pushPackage(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerNode_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromiseregisterNodePtr ptr = new RegistryPrxCallbackPromise::PromiseregisterNode();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_registerNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_registerNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_registerNode(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerNodeExt_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromiseregisterNodeExtPtr ptr = new RegistryPrxCallbackPromise::PromiseregisterNodeExt();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_registerNodeExt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_registerNodeExt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_registerNodeExt(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updatePacket_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromiseupdatePacketPtr ptr = new RegistryPrxCallbackPromise::PromiseupdatePacket();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->rsp, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_updatePacket_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updatePacket_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_updatePacket(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServer_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromiseupdateServerPtr ptr = new RegistryPrxCallbackPromise::PromiseupdateServer();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updateServer_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updateServer_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_updateServer(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServerBatch_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr ptr = new RegistryPrxCallbackPromise::PromiseupdateServerBatch();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updateServerBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updateServerBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_updateServerBatch(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<RegistryPrxCallbackPromise> RegistryPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class RegistryCoroPrxCallback: public RegistryPrxCallback
    {
    public:
        virtual ~RegistryCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Registry_all[]=
            {
                "checkChange",
                "destroy",
                "keepAlive",
                "keepAliveExt",
                "pushPackage",
                "registerNode",
                "registerNodeExt",
                "updatePacket",
                "updateServer",
                "updateServerBatch"
            };

            pair<string*, string*> r = equal_range(__Registry_all, __Registry_all+10, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Registry_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_checkChange_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        Tseer::PackageInfo rspinfo;
                        _is.read(rspinfo, 2, true);
                        setResponseContext(msg->response.context);

                        callback_checkChange(_ret, rspinfo);

                    }
                    catch(std::exception &ex)
                    {
                        callback_checkChange_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_checkChange_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_destroy_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_destroy(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_destroy_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_destroy_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_keepAlive(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepAlive_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepAlive_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAliveExt_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_keepAliveExt(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepAliveExt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepAliveExt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_pushPackage_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string result;
                        _is.read(result, 2, true);
                        setResponseContext(msg->response.context);

                        callback_pushPackage(_ret, result);

                    }
                    catch(std::exception &ex)
                    {
                        callback_pushPackage_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_pushPackage_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerNode_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_registerNode(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_registerNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_registerNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerNodeExt_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_registerNodeExt(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_registerNodeExt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_registerNodeExt_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updatePacket_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        Tseer::UpdateRsp rsp;
                        _is.read(rsp, 2, true);
                        setResponseContext(msg->response.context);

                        callback_updatePacket(_ret, rsp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updatePacket_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updatePacket_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServer_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_updateServer(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updateServer_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updateServer_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServerBatch_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_updateServerBatch(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updateServerBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updateServerBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<RegistryCoroPrxCallback> RegistryCoroPrxCallbackPtr;

    /* proxy for client */
    class RegistryProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        tars::Int32 checkChange(const Tseer::PackageInfo & reqInfo,Tseer::PackageInfo &rspinfo,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(reqInfo, 1);
            _os.write(rspinfo, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"checkChange", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(rspinfo, 2, true);
            return _ret;
        }

        void async_checkChange(RegistryPrxCallbackPtr callback,const Tseer::PackageInfo &reqInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(reqInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"checkChange", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromisecheckChangePtr > promise_async_checkChange(const Tseer::PackageInfo &reqInfo,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromisecheckChangePtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(reqInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"checkChange", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_checkChange(RegistryCoroPrxCallbackPtr callback,const Tseer::PackageInfo &reqInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(reqInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"checkChange", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 destroy(const std::string & nodeName,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"destroy", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_destroy(RegistryPrxCallbackPtr callback,const std::string &nodeName,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"destroy", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromisedestroyPtr > promise_async_destroy(const std::string &nodeName,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromisedestroyPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"destroy", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_destroy(RegistryCoroPrxCallbackPtr callback,const std::string &nodeName,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"destroy", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 keepAlive(const std::string & nodeName,const Tseer::LoadInfo & load,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            _os.write(load, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"keepAlive", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_keepAlive(RegistryPrxCallbackPtr callback,const std::string &nodeName,const Tseer::LoadInfo &load,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            _os.write(load, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAlive", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromisekeepAlivePtr > promise_async_keepAlive(const std::string &nodeName,const Tseer::LoadInfo &load,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromisekeepAlivePtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            _os.write(load, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAlive", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_keepAlive(RegistryCoroPrxCallbackPtr callback,const std::string &nodeName,const Tseer::LoadInfo &load,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            _os.write(load, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAlive", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 keepAliveExt(const Tseer::NodeInstanceInfo & nodeInfo,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeInfo, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"keepAliveExt", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_keepAliveExt(RegistryPrxCallbackPtr callback,const Tseer::NodeInstanceInfo &nodeInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAliveExt", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromisekeepAliveExtPtr > promise_async_keepAliveExt(const Tseer::NodeInstanceInfo &nodeInfo,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromisekeepAliveExtPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAliveExt", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_keepAliveExt(RegistryCoroPrxCallbackPtr callback,const Tseer::NodeInstanceInfo &nodeInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAliveExt", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 pushPackage(const Tseer::PushPackageInfo & pushPkInfo,std::string &result,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(pushPkInfo, 1);
            _os.write(result, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"pushPackage", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(result, 2, true);
            return _ret;
        }

        void async_pushPackage(RegistryPrxCallbackPtr callback,const Tseer::PushPackageInfo &pushPkInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(pushPkInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"pushPackage", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromisepushPackagePtr > promise_async_pushPackage(const Tseer::PushPackageInfo &pushPkInfo,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromisepushPackagePtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(pushPkInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"pushPackage", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_pushPackage(RegistryCoroPrxCallbackPtr callback,const Tseer::PushPackageInfo &pushPkInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(pushPkInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"pushPackage", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 registerNode(const std::string & nodeName,const Tseer::NodeInfo & ni,const Tseer::LoadInfo & li,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            _os.write(ni, 2);
            _os.write(li, 3);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"registerNode", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_registerNode(RegistryPrxCallbackPtr callback,const std::string &nodeName,const Tseer::NodeInfo &ni,const Tseer::LoadInfo &li,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            _os.write(ni, 2);
            _os.write(li, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerNode", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromiseregisterNodePtr > promise_async_registerNode(const std::string &nodeName,const Tseer::NodeInfo &ni,const Tseer::LoadInfo &li,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromiseregisterNodePtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            _os.write(ni, 2);
            _os.write(li, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerNode", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_registerNode(RegistryCoroPrxCallbackPtr callback,const std::string &nodeName,const Tseer::NodeInfo &ni,const Tseer::LoadInfo &li,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            _os.write(ni, 2);
            _os.write(li, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerNode", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 registerNodeExt(const Tseer::NodeInstanceInfo & nodeInfo,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeInfo, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"registerNodeExt", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_registerNodeExt(RegistryPrxCallbackPtr callback,const Tseer::NodeInstanceInfo &nodeInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerNodeExt", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromiseregisterNodeExtPtr > promise_async_registerNodeExt(const Tseer::NodeInstanceInfo &nodeInfo,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromiseregisterNodeExtPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerNodeExt", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_registerNodeExt(RegistryCoroPrxCallbackPtr callback,const Tseer::NodeInstanceInfo &nodeInfo,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeInfo, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerNodeExt", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 updatePacket(const Tseer::UpdateReq & req,Tseer::UpdateRsp &rsp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            _os.write(rsp, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"updatePacket", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(rsp, 2, true);
            return _ret;
        }

        void async_updatePacket(RegistryPrxCallbackPtr callback,const Tseer::UpdateReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updatePacket", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromiseupdatePacketPtr > promise_async_updatePacket(const Tseer::UpdateReq &req,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromiseupdatePacketPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updatePacket", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_updatePacket(RegistryCoroPrxCallbackPtr callback,const Tseer::UpdateReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updatePacket", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 updateServer(const Tseer::ServerStateInfo & state,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(state, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"updateServer", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_updateServer(RegistryPrxCallbackPtr callback,const Tseer::ServerStateInfo &state,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(state, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServer", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromiseupdateServerPtr > promise_async_updateServer(const Tseer::ServerStateInfo &state,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromiseupdateServerPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(state, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServer", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_updateServer(RegistryCoroPrxCallbackPtr callback,const Tseer::ServerStateInfo &state,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(state, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServer", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 updateServerBatch(const vector<Tseer::ServerStateInfo> & stateList,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(stateList, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"updateServerBatch", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_updateServerBatch(RegistryPrxCallbackPtr callback,const vector<Tseer::ServerStateInfo> &stateList,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(stateList, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServerBatch", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr > promise_async_updateServerBatch(const vector<Tseer::ServerStateInfo> &stateList,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(stateList, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServerBatch", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_updateServerBatch(RegistryCoroPrxCallbackPtr callback,const vector<Tseer::ServerStateInfo> &stateList,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(stateList, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServerBatch", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        RegistryProxy* tars_hash(int64_t key)
        {
            return (RegistryProxy*)ServantProxy::tars_hash(key);
        }

        RegistryProxy* tars_consistent_hash(int64_t key)
        {
            return (RegistryProxy*)ServantProxy::tars_consistent_hash(key);
        }

        RegistryProxy* tars_set_timeout(int msecond)
        {
            return (RegistryProxy*)ServantProxy::tars_set_timeout(msecond);
        }

    };
    typedef tars::TC_AutoPtr<RegistryProxy> RegistryPrx;

    /* servant for server */
    class Registry : public tars::Servant
    {
    public:
        virtual ~Registry(){}
        virtual tars::Int32 checkChange(const Tseer::PackageInfo & reqInfo,Tseer::PackageInfo &rspinfo,tars::TarsCurrentPtr current) = 0;
        static void async_response_checkChange(tars::TarsCurrentPtr current, tars::Int32 _ret, const Tseer::PackageInfo &rspinfo)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("rspinfo", rspinfo);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(rspinfo, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 destroy(const std::string & nodeName,tars::TarsCurrentPtr current) = 0;
        static void async_response_destroy(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 keepAlive(const std::string & nodeName,const Tseer::LoadInfo & load,tars::TarsCurrentPtr current) = 0;
        static void async_response_keepAlive(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 keepAliveExt(const Tseer::NodeInstanceInfo & nodeInfo,tars::TarsCurrentPtr current) = 0;
        static void async_response_keepAliveExt(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 pushPackage(const Tseer::PushPackageInfo & pushPkInfo,std::string &result,tars::TarsCurrentPtr current) = 0;
        static void async_response_pushPackage(tars::TarsCurrentPtr current, tars::Int32 _ret, const std::string &result)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("result", result);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(result, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 registerNode(const std::string & nodeName,const Tseer::NodeInfo & ni,const Tseer::LoadInfo & li,tars::TarsCurrentPtr current) = 0;
        static void async_response_registerNode(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 registerNodeExt(const Tseer::NodeInstanceInfo & nodeInfo,tars::TarsCurrentPtr current) = 0;
        static void async_response_registerNodeExt(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 updatePacket(const Tseer::UpdateReq & req,Tseer::UpdateRsp &rsp,tars::TarsCurrentPtr current) = 0;
        static void async_response_updatePacket(tars::TarsCurrentPtr current, tars::Int32 _ret, const Tseer::UpdateRsp &rsp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("rsp", rsp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(rsp, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 updateServer(const Tseer::ServerStateInfo & state,tars::TarsCurrentPtr current) = 0;
        static void async_response_updateServer(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 updateServerBatch(const vector<Tseer::ServerStateInfo> & stateList,tars::TarsCurrentPtr current) = 0;
        static void async_response_updateServerBatch(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __Tseer__Registry_all[]=
            {
                "checkChange",
                "destroy",
                "keepAlive",
                "keepAliveExt",
                "pushPackage",
                "registerNode",
                "registerNodeExt",
                "updatePacket",
                "updateServer",
                "updateServerBatch"
            };

            pair<string*, string*> r = equal_range(__Tseer__Registry_all, __Tseer__Registry_all+10, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Tseer__Registry_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Tseer::PackageInfo reqInfo;
                    Tseer::PackageInfo rspinfo;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("reqInfo", reqInfo);
                        tarsAttr.getByDefault("rspinfo", rspinfo, rspinfo);
                    }
                    else
                    {
                        _is.read(reqInfo, 1, true);
                        _is.read(rspinfo, 2, false);
                    }
                    tars::Int32 _ret = checkChange(reqInfo,rspinfo, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("rspinfo", rspinfo);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(rspinfo, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string nodeName;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("nodeName", nodeName);
                    }
                    else
                    {
                        _is.read(nodeName, 1, true);
                    }
                    tars::Int32 _ret = destroy(nodeName, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string nodeName;
                    Tseer::LoadInfo load;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("nodeName", nodeName);
                        tarsAttr.get("load", load);
                    }
                    else
                    {
                        _is.read(nodeName, 1, true);
                        _is.read(load, 2, true);
                    }
                    tars::Int32 _ret = keepAlive(nodeName,load, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Tseer::NodeInstanceInfo nodeInfo;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("nodeInfo", nodeInfo);
                    }
                    else
                    {
                        _is.read(nodeInfo, 1, true);
                    }
                    tars::Int32 _ret = keepAliveExt(nodeInfo, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Tseer::PushPackageInfo pushPkInfo;
                    std::string result;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("pushPkInfo", pushPkInfo);
                        tarsAttr.getByDefault("result", result, result);
                    }
                    else
                    {
                        _is.read(pushPkInfo, 1, true);
                        _is.read(result, 2, false);
                    }
                    tars::Int32 _ret = pushPackage(pushPkInfo,result, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("result", result);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(result, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string nodeName;
                    Tseer::NodeInfo ni;
                    Tseer::LoadInfo li;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("nodeName", nodeName);
                        tarsAttr.get("ni", ni);
                        tarsAttr.get("li", li);
                    }
                    else
                    {
                        _is.read(nodeName, 1, true);
                        _is.read(ni, 2, true);
                        _is.read(li, 3, true);
                    }
                    tars::Int32 _ret = registerNode(nodeName,ni,li, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Tseer::NodeInstanceInfo nodeInfo;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("nodeInfo", nodeInfo);
                    }
                    else
                    {
                        _is.read(nodeInfo, 1, true);
                    }
                    tars::Int32 _ret = registerNodeExt(nodeInfo, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Tseer::UpdateReq req;
                    Tseer::UpdateRsp rsp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("req", req);
                        tarsAttr.getByDefault("rsp", rsp, rsp);
                    }
                    else
                    {
                        _is.read(req, 1, true);
                        _is.read(rsp, 2, false);
                    }
                    tars::Int32 _ret = updatePacket(req,rsp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("rsp", rsp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(rsp, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Tseer::ServerStateInfo state;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("state", state);
                    }
                    else
                    {
                        _is.read(state, 1, true);
                    }
                    tars::Int32 _ret = updateServer(state, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    vector<Tseer::ServerStateInfo> stateList;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("stateList", stateList);
                    }
                    else
                    {
                        _is.read(stateList, 1, true);
                    }
                    tars::Int32 _ret = updateServerBatch(stateList, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
